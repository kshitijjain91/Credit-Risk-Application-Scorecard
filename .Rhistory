IV_dataframe$feedback[i] = "Weak"
} else if(IV_dataframe$IV[i]>=0.1 & IV_dataframe$IV[i]<0.3){
IV_dataframe$feedback[i] = "Medium"
}else if(IV_dataframe$IV[i]>=0.3 & IV_dataframe$IV[i]<0.5){
IV_dataframe$feedback[i] = "Strong"
}else if(IV_dataframe$IV[i]>0.1 & IV_dataframe$IV[i]<0.3){
IV_dataframe$feedback[i] = "Suspicious"
}
}
str(IV_dataframe)
IV_dataframe$Variable <- as.factor(IV_dataframe$Variable)
IV_dataframe$feedback <- as.factor(IV_dataframe$feedback)
imp_vars <- which(IV_dataframe$feedback=="Strong"|IV_dataframe$feedback=="Medium")
k1 <- IV_dataframe[imp_vars,1]
master <- master[,colnames(master) %in% k1]
str(master)
credit <- credit[-which(is.na(credit$Performance.Tag)), ]
master <- cbind(master, credit[,19])
colnames(master)[16] <- "Performance.Tag"
str(master)
info_val <- create_infotables(master, y="Performance.Tag",ncore = 2)
info_val$Tables
info_val$Summary
colnames(master) %in% k1
credit <- read.csv("Credit Bureau_v1.csv")
demo <- read.csv("Demogs_v1.csv")
# Basic data quality checks
# Check for duplicate values
# Credit bureau
str(credit)
dup <- duplicated(credit$Application.ID)
sum(dup)
# There are 3 duplicate IDs in the credit bureau data, removing them
credit <- credit[!duplicated(credit$Application.ID), ]
str(credit)
# Check for duplicate values in demographic data
str(demo)
dup <- duplicated(demo$Application.ID)
sum(dup)
demo <- demo[!duplicated(demo$Application.ID), ]
str(demo)
# Merging both datasets by a common ID i.e "Application.ID"
master <- merge(credit, demo, by="Application.ID")
str(master)
# Check if performance tags of both data sets are same i.e "Performance.Tag.x" and "Performance.Tag.y" should be same
na_match <- sum(which(is.na(master$Performance.Tag.x)) == which(is.na(master$Performance.Tag.y)))
performance_match <- sum(master$Performance.Tag.x == master$Performance.Tag.y, na.rm=T)
na_match + performance_match == nrow(master)
# conclusion: all na values and data are matching in performance tags
# removing performance tag y
master <- master[, -30]
# Also, the ones with performance tag NA are the rejected population
# Storing it as a separate dataframe
reject_rows <- which(is.na(master$Performance.Tag.x))
rejected <- master[reject_rows, ]
str(rejected)
str(master)
nrow(rejected)
rejection_rate <- nrow(rejected)/nrow(master)
rejection_rate*100
approval_rate <- (1-rejection_rate)
approval_rate*100
# Missing value analysis and imputation
# Let's check the summary
master <- master[-reject_rows, ]
str(master)
sapply(master, function(x) sum(is.na(x)))
# Information value and WOE calculation
IV <- create_infotables(master[,-1],y="Performance.Tag.x",ncore = 2)
IV$Tables
IV$Summary
IV_dataframe <- IV$Summary
str(IV_dataframe)
for(i in 1:nrow(IV_dataframe)){
if (IV_dataframe$IV[i]<0.02){
IV_dataframe$feedback[i] = "Useless"
} else if(IV_dataframe$IV[i]>=0.02& IV_dataframe$IV[i]<0.1){
IV_dataframe$feedback[i] = "Weak"
} else if(IV_dataframe$IV[i]>=0.1 & IV_dataframe$IV[i]<0.3){
IV_dataframe$feedback[i] = "Medium"
}else if(IV_dataframe$IV[i]>=0.3 & IV_dataframe$IV[i]<0.5){
IV_dataframe$feedback[i] = "Strong"
}else if(IV_dataframe$IV[i]>0.1 & IV_dataframe$IV[i]<0.3){
IV_dataframe$feedback[i] = "Suspicious"
}
}
str(IV_dataframe)
IV_dataframe$Variable <- as.factor(IV_dataframe$Variable)
IV_dataframe$feedback <- as.factor(IV_dataframe$feedback)
imp_vars <- which(IV_dataframe$feedback=="Strong"|IV_dataframe$feedback=="Medium")
f
str(IV_dataframe)
k1 <- IV_dataframe[imp_vars,1]
colnames(master) %in% k1
str(master)
colnames(master) %in% k1
which(colnames(master) %in% k1)
master[, which(colnames(master) %in% k1)]
head(master[, which(colnames(master) %in% k1)])
imp <- colnames(master) %in% k1
imp <- colnames(master) %in% k1
imp
imp <- which(colnames(master) %in% k1)
imp
c(1, imp)
master <- master[,c(1, imp)]
str(master)
master <- merge(master, credit, by="Application.ID")
str(master)
# Load credit bureau and demographic dataset
credit <- read.csv("Credit Bureau_v1.csv")
demo <- read.csv("Demogs_v1.csv")
# Basic data quality checks
# Check for duplicate values
# Credit bureau
str(credit)
dup <- duplicated(credit$Application.ID)
sum(dup)
# There are 3 duplicate IDs in the credit bureau data, removing them
credit <- credit[!duplicated(credit$Application.ID), ]
str(credit)
# Check for duplicate values in demographic data
str(demo)
dup <- duplicated(demo$Application.ID)
sum(dup)
demo <- demo[!duplicated(demo$Application.ID), ]
str(demo)
# Merging both datasets by a common ID i.e "Application.ID"
master <- merge(credit, demo, by="Application.ID")
str(master)
# Check if performance tags of both data sets are same i.e "Performance.Tag.x" and "Performance.Tag.y" should be same
na_match <- sum(which(is.na(master$Performance.Tag.x)) == which(is.na(master$Performance.Tag.y)))
performance_match <- sum(master$Performance.Tag.x == master$Performance.Tag.y, na.rm=T)
na_match + performance_match == nrow(master)
# conclusion: all na values and data are matching in performance tags
# removing performance tag y
master <- master[, -30]
# Also, the ones with performance tag NA are the rejected population
# Storing it as a separate dataframe
reject_rows <- which(is.na(master$Performance.Tag.x))
rejected <- master[reject_rows, ]
str(rejected)
str(master)
nrow(rejected)
rejection_rate <- nrow(rejected)/nrow(master)
rejection_rate*100
approval_rate <- (1-rejection_rate)
approval_rate*100
# Missing value analysis and imputation
# Let's check the summary
master <- master[-reject_rows, ]
str(master)
sapply(master, function(x) sum(is.na(x)))
# Information value and WOE calculation
IV <- create_infotables(master[,-1],y="Performance.Tag.x",ncore = 2)
IV$Tables
IV$Summary
# Let's create a dataframe containing IV values of all the variables
IV_dataframe <- IV$Summary
str(IV_dataframe)
# Following the thumb rule, a variable is:
# Useless if IV is < 0.02
# Weak if IV is [0.02, 0.1)
# Medium if IV is [0.1, 0.3)
# Strong if IV is[0.3, 0.5) and suspicious thereafter
for(i in 1:nrow(IV_dataframe)){
if (IV_dataframe$IV[i]<0.02){
IV_dataframe$feedback[i] = "Useless"
} else if(IV_dataframe$IV[i]>=0.02& IV_dataframe$IV[i]<0.1){
IV_dataframe$feedback[i] = "Weak"
} else if(IV_dataframe$IV[i]>=0.1 & IV_dataframe$IV[i]<0.3){
IV_dataframe$feedback[i] = "Medium"
}else if(IV_dataframe$IV[i]>=0.3 & IV_dataframe$IV[i]<0.5){
IV_dataframe$feedback[i] = "Strong"
}else if(IV_dataframe$IV[i]>0.1 & IV_dataframe$IV[i]<0.3){
IV_dataframe$feedback[i] = "Suspicious"
}
}
str(IV_dataframe)
IV_dataframe$Variable <- as.factor(IV_dataframe$Variable)
IV_dataframe$feedback <- as.factor(IV_dataframe$feedback)
## Extract "Strong" and "Medium" variables
imp_vars <- which(IV_dataframe$feedback=="Strong"|IV_dataframe$feedback=="Medium")
k1 <- IV_dataframe[imp_vars,1]
imp <- which(colnames(master) %in% k1)
imp
master <- master[,c(1, imp)]
str(master)
# master now only contains the medium and strong variables
str(master)
?merge
master_woe <- merge(master, credit, by="Application.ID")
str(master_woe)
master_woe <- merge(master, credit)
str(master_woe)
str(master)
str(master_woe)
info_val <- create_infotables(master_woe, y="Performance.Tag", ncore = 2)
info_val$Tables
info_val$Summary
str(master_woe)
info_val <- create_infotables(master_woe[, -1], y="Performance.Tag", ncore = 2)
info_val$Tables
info_val$Summary
str(master_woe)
str(master_woe)
info_val$Summary
str(master_woe)
View(IV_dataframe)
imp_vars <- which(IV_dataframe$feedback=="Strong"|IV_dataframe$feedback=="Medium")
imp_vars
IV_dataframe[imp_vars, 1]
k1 <- IV_dataframe[imp_vars, 1]
imp <- which(colnames(master) %in% k1)
imp
master[imp, 1]
imp <- which(colnames(master) %in% k1)
str(master)
credit <- read.csv("Credit Bureau_v1.csv")
demo <- read.csv("Demogs_v1.csv")
# Basic data quality checks
# Check for duplicate values
# Credit bureau
str(credit)
dup <- duplicated(credit$Application.ID)
sum(dup)
# There are 3 duplicate IDs in the credit bureau data, removing them
credit <- credit[!duplicated(credit$Application.ID), ]
str(credit)
# Check for duplicate values in demographic data
str(demo)
dup <- duplicated(demo$Application.ID)
sum(dup)
demo <- demo[!duplicated(demo$Application.ID), ]
str(demo)
# Merging both datasets by a common ID i.e "Application.ID"
master <- merge(credit, demo, by="Application.ID")
str(master)
# Check if performance tags of both data sets are same i.e "Performance.Tag.x" and "Performance.Tag.y" should be same
na_match <- sum(which(is.na(master$Performance.Tag.x)) == which(is.na(master$Performance.Tag.y)))
performance_match <- sum(master$Performance.Tag.x == master$Performance.Tag.y, na.rm=T)
na_match + performance_match == nrow(master)
# conclusion: all na values and data are matching in performance tags
# removing performance tag y
master <- master[, -30]
# Also, the ones with performance tag NA are the rejected population
# Storing it as a separate dataframe
reject_rows <- which(is.na(master$Performance.Tag.x))
rejected <- master[reject_rows, ]
str(rejected)
str(master)
nrow(rejected)
rejection_rate <- nrow(rejected)/nrow(master)
rejection_rate*100
approval_rate <- (1-rejection_rate)
approval_rate*100
# Missing value analysis and imputation
# Let's check the summary
master <- master[-reject_rows, ]
str(master)
sapply(master, function(x) sum(is.na(x)))
str(master)
IV <- create_infotables(master[,-1],y="Performance.Tag.x",ncore = 2)
IV$Summary
IV_dataframe <- IV$Summary
str(IV_dataframe)
for(i in 1:nrow(IV_dataframe)){
if (IV_dataframe$IV[i]<0.02){
IV_dataframe$feedback[i] = "Useless"
} else if(IV_dataframe$IV[i]>=0.02& IV_dataframe$IV[i]<0.1){
IV_dataframe$feedback[i] = "Weak"
} else if(IV_dataframe$IV[i]>=0.1 & IV_dataframe$IV[i]<0.3){
IV_dataframe$feedback[i] = "Medium"
}else if(IV_dataframe$IV[i]>=0.3 & IV_dataframe$IV[i]<0.5){
IV_dataframe$feedback[i] = "Strong"
}else if(IV_dataframe$IV[i]>0.1 & IV_dataframe$IV[i]<0.3){
IV_dataframe$feedback[i] = "Suspicious"
}
}
str(IV_dataframe)
IV_dataframe$Variable <- as.factor(IV_dataframe$Variable)
IV_dataframe$feedback <- as.factor(IV_dataframe$feedback)
str(IV_dataframe)
imp_vars <- which(IV_dataframe$feedback=="Strong"|IV_dataframe$feedback=="Medium")
k1 <- IV_dataframe[imp_vars, 1]
imp <- which(colnames(master) %in% k1)
str(master)
master <- master[, c(1, imp, 19)]
str(master)
master_woe <- master
info_val <- create_infotables(master_woe[, -1], y="Performance.Tag.x", ncore = 2)
info_val$Summary
str(master_woe)
?create_infotables
str(master_woe)
info_val$Summary
info_val$Tables
info_val
matrix_1 <- list()
str(info_val)
info_val$Summary
info_val$Tables
info_val$Tables
info_val$Tables[[2]]
str(info_val$Tables[[2]])
woe_list <- list()
info_val$Tables
typeof(info_val$Tables)
length(info_val$Tables)
for(i in 1:length(info_val$Tables)) {
woe_list[[i]] = cbind(info_val$Tables[[i]][1],info_val$Tables[[i]][4])
}
woe_list
nrow(woe_list)
woe_list
woe_list[[2]]
woe_list[[6]]
str(woe_list[[6]])
x <- woe_list[[5]]
s <- df[i,1]
woe_list
x <- woe_list[[14]]
x
x[1,1]
is.na(x[1,1])
x[1,1]=="NA"
x
woe_list[[4]]
x
s=x[2,1]
s
str_replace_all(s, fixed(" "), "")
library(stringr)
str_replace_all(s, fixed(" "), "")
strsplit(gsub("\\[|\\]", "", s), split=",")
strsplit(gsub("\\[|\\]", "", s), split=",")[[1]]
strsplit(gsub("\\[|\\]", "", s), split=",")[[1]][[1]]
strsplit(gsub("\\[|\\]", "", s), split=",")[[1]][[2]]
str(master_woe)
woe_function <- function(df, variable) {
for(i in 1:nrow(df)){
s <- df[i,1]
if(s=="NA"){
replace_by = df[i,2]
variable[which(is.na(variable))] = replace_by
} else {
s <- str_replace_all(s, fixed(" "), "")
s_list <- strsplit(gsub("\\[|\\]", "", s), split=",")
n = as.integer(s_list[[1]][[1]])
m = as.integer(s_list[[1]][[2]])
range <- n:m
replace_by = k[i,2]
variable[which(variable %in% range)] = replace_by
}
}
return(variable)
}
empty_matrix <- matrix(0, nrow(master_woe), ncol(master_woe))
str(master_woe)
woe_function <- function(df, variable) {
for(i in 1:nrow(df)){
s <- df[i,1]
if(s=="NA"){
replace_by = df[i,2]
variable[which(is.na(variable))] = replace_by
} else {
s <- str_replace_all(s, fixed(" "), "")
s_list <- strsplit(gsub("\\[|\\]", "", s), split=",")
n = as.integer(s_list[[1]][[1]])
m = as.integer(s_list[[1]][[2]])
range <- n:m
replace_by = k[i,2]
variable[which(variable %in% range)] = replace_by
}
}
return(variable)
}
empty_matrix <- matrix(0, nrow(master_woe), ncol(master_woe))
empty_matrix <- matrix(0, nrow(master_woe), ncol(master_woe))
for(i in 1:ncol(master_woe[,-17]))
{
empty_matrix[,i] = woe_function(woe_list[[i]], master_woe[,i])
}
for(i in 1:ncol(master_woe[,-17]))
{
empty_matrix[,i] = woe_function(woe_list[[i]], master_woe[,i])
}
empty_matrix <- matrix(0, nrow(master_woe), ncol(master_woe))
for(i in 1:ncol(master_woe[,-17]))
{
empty_matrix[,i] = woe_function(woe_list[[i]], master_woe[,i])
}
woe_function <- function(df, variable) {
for(i in 1:nrow(df)){
s <- df[i,1]
if(s=="NA"){
replace_by = df[i,2]
variable[which(is.na(variable))] = replace_by
} else {
s <- str_replace_all(s, fixed(" "), "")
s_list <- strsplit(gsub("\\[|\\]", "", s), split=",")
n = as.integer(s_list[[1]][[1]])
m = as.integer(s_list[[1]][[2]])
range <- n:m
replace_by = df[i,2]
variable[which(variable %in% range)] = replace_by
}
}
return(variable)
}
empty_matrix <- matrix(0, nrow(master_woe), ncol(master_woe))
for(i in 1:ncol(master_woe[,-17]))
{
empty_matrix[,i] = woe_function(woe_list[[i]], master_woe[,i])
}
woe_list[[16]]
woe_list[[15]]
str(master_woe)
woe_function <- function(df, variable) {
for(i in 1:nrow(df)){
s <- df[i,1]
if(s=="NA"){
replace_by = df[i,2]
variable[which(is.na(variable))] = replace_by
} else {
s <- str_replace_all(s, fixed(" "), "")
s_list <- strsplit(gsub("\\[|\\]", "", s), split=",")
n = as.integer(s_list[[1]][[1]])
m = as.integer(s_list[[1]][[2]])
range <- n:m
replace_by = df[i,2]
variable[which(variable %in% range)] = replace_by
}
}
return(variable)
}
empty_matrix <- matrix(0, nrow(master_woe), ncol(master_woe))
for(i in 1:ncol(master_woe[,-c(1,17)]))
{
empty_matrix[,i] = woe_function(woe_list[[i]], master_woe[,i])
}
woe_data <- data.frame(empty_matrix)
str(woe_data)
str(master_woe)
ncol(master_woe[,-c(1,17)])
colnames(master_woe[,-c(1,17)])
str(master_woe)
master_woe[, c(1,2 )]
str(master_woe)
2:16
length(2:16)
empty_matrix <- matrix(0, nrow(master_woe), ncol(master_woe))
str(master_woe)
for(i in 2:16)
{
empty_matrix[,i] = woe_function(df=woe_list[[i]], variable=master_woe[,i])
}
woe_list[[1]]
for(i in 2:16)
{
empty_matrix[,i] = woe_function(df=woe_list[[i-1]], variable=master_woe[,i])
}
woe_data <- data.frame(empty_matrix)
str(woe_data)
str(master_woe)
for(i in 2:16)
{
master_woe[, i] = woe_function(df=woe_list[[i-1]], variable=master_woe[,i])
}
str(master_woe)
which(!colnames(master_woe) %in% c("Application.ID") )
which(!colnames(master_woe) %in% c("Application.ID", "Performance.Tag.x") )
col_replace <- which(!colnames(master_woe) %in% c("Application.ID", "Performance.Tag.x") )
col_replace
for(i in col_replace)
{
master_woe[, i] = woe_function(df=woe_list[[i-1]], variable=master_woe[,i])
}
str(master_woe)
str(master_woe)
names <- names(info_val$Tables)
names
plots <- list()
for (i in 1:length(names)){
plots[[i]] <- plot_infotables(info_val, names[i])
}
plots[1:ncol(woe_data)]
ncol(woe_data)
plots
typeof(plots)
plots[[1]]
plots[[2]]
plots
str(woe_data)
master_woe
str(master_woe)
set.seed(1)
train <- master_woe[split_indices, ]
test <- master_woe[!split_indices, ]
initial_model = glm(Performance.Tag.x ~ ., data = train, family = "binomial")
summary(initial_model)
info_val$Summary
summary(initial_model)
str(master_woe)
master_woe <- master_woe[, -1]
split_indices <- sample.split(master_woe$Performance.Tag.x, SplitRatio = 0.70)
train <- master_woe[split_indices, ]
test <- master_woe[!split_indices, ]
initial_model = glm(Performance.Tag.x ~ ., data = train, family = "binomial")
summary(initial_model)
best_model_1 = step(initial_model, direction = "both")
summary(best_model_1)
